# app/utilities/pdf_generator.py

"""Modu≈Ç generowania pliku PDF z zrzut√≥w ekranu i transkrypcji

Skrypt umo≈ºliwia generowanie pliku PDF, kt√≥ry ≈ÇƒÖczy zrzuty ekranu (*.jpg) oraz transkrypcje (*.txt),
sortujƒÖc pliki na podstawie timestamp√≥w zawartych w nazwach plik√≥w. Zrzuty ekranu i transkrypcje sƒÖ dodawane
do pliku PDF w odpowiedniej kolejno≈õci.

Wymagane zale≈ºno≈õci

Aby uruchomiƒá skrypt, nale≈ºy zainstalowaƒá nastƒôpujƒÖce pakiety w ≈õrodowisku Python:

    - reportlab: Biblioteka do generowania plik√≥w PDF

Do prawid≈Çowego dzia≈Çania aplikacji nale≈ºy zaimportowaƒá:

    - generate_pdf_from_files z modu≈Çu app.pdf_generator, kt√≥ra generuje plik PDF na podstawie plik√≥w z folder√≥w
      zawierajƒÖcych zrzuty ekranu i transkrypcje.

Skrypt mo≈ºe byƒá u≈ºywany jako modu≈Ç i zawiera nastƒôpujƒÖcƒÖ funkcjƒô:

    * generate_pdf_from_files - Generuje plik PDF na podstawie zrzut√≥w ekranu i transkrypcji, sortujƒÖc je wed≈Çug
      timestamp√≥w w nazwach plik√≥w.

Ka≈ºda funkcja zawiera mechanizmy obs≈Çugi b≈Çƒôd√≥w oraz odpowiednie komunikaty dla u≈ºytkownika.
"""


import os
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from reportlab.platypus import SimpleDocTemplate, Spacer, Paragraph, Image
from app.utilities.api.openai_api import summarize_transcription
from textwrap import wrap
import markdown2
from reportlab.lib import colors

def generate_pdf_from_files(output_pdf, screenshots_folder, transcripts_folder, full_transcription_path):
    """
    Generuje plik PDF na podstawie zrzut√≥w ekranu (*.jpg) i transkrypcji (*.txt),
    sortujƒÖc pliki wed≈Çug timestamp√≥w w nazwach. Dodaje stronƒô tytu≈ÇowƒÖ z podsumowaniem AI.

    Args:
        output_pdf (str): ≈öcie≈ºka do wyj≈õciowego pliku PDF.
        screenshots_folder (str): ≈öcie≈ºka do folderu zawierajƒÖcego pliki zrzut√≥w ekranu.
        transcripts_folder (str): ≈öcie≈ºka do folderu zawierajƒÖcego pliki transkrypcji.
        full_transcription_path (str): ≈öcie≈ºka do pe≈Çnej transkrypcji dla podsumowania AI.
    """

    # Rejestracja czcionki obs≈ÇugujƒÖcej polskie znaki
    styles_path = os.path.join(os.getcwd(), "styles")
    font_path = os.path.join(styles_path, "DejaVuSans.ttf")
    if not os.path.exists(font_path):
        raise FileNotFoundError(f"Nie znaleziono pliku czcionki: {font_path}")

    pdfmetrics.registerFont(TTFont("DejaVuSans", font_path))

    # Pobranie podsumowania AI i konwersja Markdown ‚Üí HTML
    summary = summarize_transcription(full_transcription_path)
    summary_html = markdown2.markdown(summary)

    # Tworzenie dokumentu PDF
    doc = SimpleDocTemplate(output_pdf, pagesize=A4)
    elements = []
    styles = getSampleStyleSheet()

    # STRONA TYTU≈ÅOWA
    title_style = styles["Title"]
    title_style.fontName = "DejaVuSans"
    title_style.textColor = colors.black
    title_style.alignment = 1  # Wy≈õrodkowanie
    elements.append(Paragraph("üìÑ RAPORT ZE SPOTKANIA üìÑ", title_style))
    elements.append(Spacer(1, 20))

    # PODSUMOWANIE
    body_style = styles["BodyText"]
    body_style.fontName = "DejaVuSans"
    body_style.leading = 14  # Odstƒôpy miƒôdzy liniami

    summary_paragraph = Paragraph(summary_html, body_style)
    elements.append(summary_paragraph)
    elements.append(Spacer(1, 30))

    # Nowa strona po podsumowaniu
    elements.append(Spacer(1, 50))

    # LISTA PLIK√ìW (SCREENSHOTY + TRANSKRYPCJE)
    screenshots = sorted([f for f in os.listdir(screenshots_folder) if f.endswith('.jpg')])
    transcripts = sorted([f for f in os.listdir(transcripts_folder) if f.endswith('.txt')])

    def extract_timestamp(filename):
        return tuple(map(int, filename.split('.')[0].split('-')))

    screenshots = sorted(screenshots, key=extract_timestamp)
    transcripts = sorted(transcripts, key=extract_timestamp)

    combined = sorted([(f, 'screenshot') for f in screenshots] + [(f, 'transcript') for f in transcripts],
                      key=lambda x: extract_timestamp(x[0]))

    # Dodanie obraz√≥w i transkrypcji do PDF
    for filename, file_type in combined:
        if file_type == 'screenshot':
            file_path = os.path.join(screenshots_folder, filename)
            try:
                img = Image(file_path, width=400, height=300)  # Ustawienie szeroko≈õci i wysoko≈õci obrazu
                elements.append(Spacer(1, 20))
                elements.append(img)
                elements.append(Spacer(1, 20))
            except Exception as e:
                print(f"B≈ÇƒÖd podczas dodawania obrazu {filename}: {e}")

        elif file_type == 'transcript':
            file_path = os.path.join(transcripts_folder, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    text = f.read()

                text_html = markdown2.markdown(text)
                transcript_paragraph = Paragraph(text_html, body_style)
                elements.append(transcript_paragraph)
                elements.append(Spacer(1, 15))
            except Exception as e:
                print(f"B≈ÇƒÖd podczas dodawania tekstu {filename}: {e}")

    # Zapisanie dokumentu PDF
    doc.build(elements)
    print(f"Raport PDF zosta≈Ç wygenerowany: {output_pdf}")